// database.js - Gerenciador de conex√£o MySQL para o Bot Zap
require('dotenv').config();

const mysql = require('mysql2/promise');

// Configura√ß√£o do banco baseada no ambiente
const isProduction = process.env.NODE_ENV === 'production' || process.env.RAILWAY_ENVIRONMENT;

// Debug das vari√°veis de ambiente
console.log('üîç Debug das vari√°veis de ambiente:');
console.log(`üîç NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`üîç RAILWAY_ENVIRONMENT: ${process.env.RAILWAY_ENVIRONMENT}`);
console.log(`üîç RAILWAY_PRIVATE_DOMAIN: ${process.env.RAILWAY_PRIVATE_DOMAIN}`);
console.log(`üîç MYSQLHOST: ${process.env.MYSQLHOST}`);
console.log(`üîç MYSQLPORT: ${process.env.MYSQLPORT}`);
console.log(`üîç MYSQLDATABASE: ${process.env.MYSQLDATABASE}`);
console.log(`üîç MYSQLUSER: ${process.env.MYSQLUSER}`);
console.log(`üîç MYSQLPASSWORD: ${process.env.MYSQLPASSWORD ? '***DEFINIDA***' : 'N√ÉO DEFINIDA'}`);
console.log(`üîç MYSQL_ROOT_PASSWORD: ${process.env.MYSQL_ROOT_PASSWORD ? '***DEFINIDA***' : 'N√ÉO DEFINIDA'}`);

const dbConfig = isProduction ? {
  // ‚úÖ PRODU√á√ÉO: Usar URL de conex√£o direta do Railway
  uri: 'mysql://root:nmZKnTmDpQIwmvRBYIoIbFjYyaiZPoEq@gondola.proxy.rlwy.net:23254/railway',
  charset: 'utf8mb4'
} : {
  // ‚úÖ DESENVOLVIMENTO: Usar configura√ß√£o local
  host: 'localhost',
  port: 3306,
  user: 'root',
  password: '',
  database: 'pregiato_dev',
  charset: 'utf8mb4'
};

// Log da configura√ß√£o de banco (sem senha)
console.log(`üîß Configura√ß√£o de banco: ${isProduction ? 'PRODU√á√ÉO' : 'DESENVOLVIMENTO'}`);
if (isProduction) {
  console.log(`üîß URL de conex√£o: mysql://root:***@gondola.proxy.rlwy.net:23254/railway`);
} else {
  console.log(`üîß Host: ${dbConfig.host}, Database: ${dbConfig.database}, User: ${dbConfig.user}`);
  console.log(`üîß Port: ${dbConfig.port}`);
}

// Pool de conex√µes
let connectionPool = null;

// Cache para OperatorLeads
let operatorLeadsCache = [];
let lastCacheUpdate = null;
const CACHE_TTL = 5 * 60 * 1000; // 5 minutos

// Fun√ß√£o para conectar ao banco
async function connectDatabase() {
  try {
    console.log('üîå Tentando conectar ao banco MySQL...');
    
    if (isProduction) {
      console.log('üîå Usando URL de conex√£o direta para produ√ß√£o');
      connectionPool = mysql.createPool(dbConfig.uri);
    } else {
      console.log('üîå Configura√ß√£o local:', {
        host: dbConfig.host,
        port: dbConfig.port,
        user: dbConfig.user,
        database: dbConfig.database,
        charset: dbConfig.charset
      });
      connectionPool = mysql.createPool(dbConfig);
    }
    
    // Testar conex√£o
    const connection = await connectionPool.getConnection();
    console.log('‚úÖ Conectado ao banco MySQL com sucesso!');
    connection.release();
    
    // Carregar cache inicial
    await loadOperatorLeadsCache();
    
    return connectionPool;
  } catch (error) {
    console.error('‚ùå Erro ao conectar ao banco:', error.message);
    console.error('‚ùå Stack trace:', error.stack);
    throw error;
  }
}

// Fun√ß√£o para carregar cache de OperatorLeads
async function loadOperatorLeadsCache() {
  try {
    if (!connectionPool) {
      await connectDatabase();
    }
    
    const [rows] = await connectionPool.execute(`
      SELECT OperatorId, EmailOperator, NameLead, PhoneLead 
      FROM OperatorLeads
    `);
    
    operatorLeadsCache = rows;
    lastCacheUpdate = Date.now();
    
    console.log(`üìä Cache carregado: ${rows.length} leads alocados`);
    return rows;
  } catch (error) {
    console.error('‚ùå Erro ao carregar cache:', error.message);
    throw error;
  }
}

// Fun√ß√£o para atualizar cache (se expirou)
async function refreshCacheIfNeeded() {
  if (!lastCacheUpdate || (Date.now() - lastCacheUpdate) > CACHE_TTL) {
    console.log('üîÑ Cache expirado, atualizando...');
    await loadOperatorLeadsCache();
  }
}

// Fun√ß√£o para validar se um n√∫mero est√° na lista de leads
async function isNumberInLeads(phoneNumber) {
  await refreshCacheIfNeeded();
  
  // Normalizar n√∫mero (remover +, espa√ßos, etc)
  const normalizedNumber = phoneNumber.replace(/[^0-9]/g, '');
  
  // Verificar se est√° no cache
  const found = operatorLeadsCache.find(lead => {
    const leadPhone = lead.PhoneLead.replace(/[^0-9]/g, '');
    return leadPhone.includes(normalizedNumber) || normalizedNumber.includes(leadPhone);
  });
  
  return found ? found : null;
}

// Fun√ß√£o para obter conex√£o
async function getConnection() {
  if (!connectionPool) {
    await connectDatabase();
  }
  return connectionPool;
}

// Fun√ß√£o para fechar conex√£o
async function closeDatabase() {
  if (connectionPool) {
    await connectionPool.end();
    connectionPool = null;
    console.log('üîå Conex√£o com banco fechada');
  }
}

module.exports = {
  connectDatabase,
  getConnection,
  closeDatabase,
  loadOperatorLeadsCache,
  refreshCacheIfNeeded,
  isNumberInLeads
};
