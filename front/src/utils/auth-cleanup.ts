/**
 * Utilit√°rios para limpeza de dados de autentica√ß√£o
 */

/**
 * Limpa todos os dados residuais que podem interferir com a autentica√ß√£o
 */
export function clearAuthData(): void {
  try {
    // Limpar dados do Clerk
    sessionStorage.removeItem('clerk_failed');
    sessionStorage.removeItem('clerk_last_failure');
    
    // Limpar dados de autentica√ß√£o do localStorage
    localStorage.removeItem('atd.tickets');
    
    // Limpar cookies relacionados √† autentica√ß√£o
    document.cookie.split(";").forEach(function(c) { 
      document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/"); 
    });
    
    console.log('‚úÖ Dados de autentica√ß√£o limpos com sucesso');
  } catch (error) {
    console.error('‚ùå Erro ao limpar dados de autentica√ß√£o:', error);
  }
}

/**
 * Verifica se h√° dados residuais que podem causar problemas de autentica√ß√£o
 */
export function checkAuthDataIssues(): boolean {
  try {
    const clerkFailed = sessionStorage.getItem('clerk_failed') === 'true';
    const lastFailure = sessionStorage.getItem('clerk_last_failure');
    
    if (clerkFailed && lastFailure) {
      const timeSinceFailure = Date.now() - parseInt(lastFailure);
      // Se a falha foi h√° mais de 1 hora, limpar automaticamente
      if (timeSinceFailure > 60 * 60 * 1000) {
        console.log('üîÑ Limpando dados de falha antigos do Clerk');
        clearAuthData();
        return true;
      }
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao verificar dados de autentica√ß√£o:', error);
    return false;
  }
}

/**
 * For√ßa a reinicializa√ß√£o da autentica√ß√£o
 */
export function forceAuthReinit(): void {
  try {
    // Limpar dados
    clearAuthData();
    
    // Recarregar a p√°gina para for√ßar reinicializa√ß√£o
    window.location.reload();
  } catch (error) {
    console.error('‚ùå Erro ao for√ßar reinicializa√ß√£o da autentica√ß√£o:', error);
  }
}
